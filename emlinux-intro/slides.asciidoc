= Embedded Linux Introduction

== Embedded Systems

=== Embedded Vs Open Systems

* *Embedded System* - Programmable electronics system immersed in a
  larger physical system, and has fixed functionalities.

* *Open System* - General purpose system which is inter-operable and
  sticks to open standards, whose hardware and software features are
  scaleable and extensible.

* We are in an era of *Hybrid embedded systems*, where the devices built
  has mixed properties of both embedded system and open system.

* Currently the specific purpose embedded systems are classified as
  *deeply embedded systems*.

=== Embedded Software Model 

* Mostly in deeply embedded systems monolithic binary image of
  software called as *firmware* is developed.
 
* In mid level embedded systems the minimalist *multi-threaded OS or
  real-time OS (RTOS)* is used along with the application code to
  build the firmware image.

* In above firmware model the software features are freezed at compile
  time itself and it cannot be scaled at later point.

* The high level embedded systems are hybrid and uses *general purpose
  operating systems (GPOS)*.

=== Embedded Software Model Contd.

image::figures/embedded-software-model.png[align="center"]

=== High Level Embedded Systems Application

They are used in

  * Telecom

  * Network

  * Consumer electronics

[role="two-column"]
=== General Purpose Operating System

[role="left"]

 * Supports running several applications together.

 * It would be multi-layered with multiple software components
   integrated together.

 * Follows open standards like POSIX

 * Applications can be installed or removed at runtime.

 * Applications are untrusted by OS and are provided less privileges.

 * Linux, BSD, MAC, Windows etc.,

[role="right"]
image::figures/gpos-stack.png[]

== Linux

=== What is Linux

  * *Unix-like:* a GPOS provides an interface similar to the Unix
    operating system developed by Bell labs.

  * *multi-tasking:* many different applications at the same time

  * *multi-user:* many different users can use the system 

  * *cross-platform:* supports wide variety of hardware - desktops,
    mainframes, supercomputers, gaming stations, mobile phones,
    routers, etc.

== Linux Usage

[role="two-column"]
=== User Interaction
[role="left"]
  * User can interact to an UNIX system through `shell` or through
    `desktop environment`.

  * A *shell* is a command line application provides a means for
    navigating through the file system, and launching other programs
    on request.

  * *Desktop environment* is the graphical replacement for shell and
    provides much more convenience for desktop users.

[role="right"]
image:figures/unix-rings.png[width=588]

=== Files in Linux

  * `File system` allows to organize the user's data as `files` in a
    convenient way in the storage devices.

  * Files in GNU/Linux can be broadly classified as follows:
    - `Regular files` like text files, images, binaries, pdfs etc., 
    - `Directories` to group the related files
    - `Links` is like shorcuts in windows
    - And `Device files` which allows to access devices

//////
=== Special Filesystems

  * `procfs` - provides process and kernel related information as files.

  * `sysfs`  - provides devices related information as files.

=== Device Files

  * In GNU/Linux every device is represented by a file in `/dev`
    directory. For example `/dev/sda` represents the hard disk,
    `/dev/ttyS0` represents the serial port, `/dev/input/mice`
    represents the mouse, ...

  * Reading/writing to and from the device file, results in reading
    from/writing to the device. To get mouse events the following
    command can be used.

=== File System Tree

  * A file system tree, with all the necessary files is required for
    Linux system to boot.

  * Files present in the file system tree include
    - system programs
    - application programs
    - configuration files
    - device files


[role="two-column"]
=== Layout

[role="left"]
.Windows XP Layout Tree
image::figures/winxp-layout.png["Windows XP Layout Tree",width=288]

[role="right"]
.GNU/Linux Layout Tree
image::figures/linux-layout.png["GNU/Linux Layout Tree"]

===  Need for a File Systems

  * Data corresponding to a file are stored in sectors of the
    hard-disk.

image::figures/no-fs.png[width=388, align="center"]
    
  * User has to remember the sectors that store the contents of a file.

  * The user also has to keep track of which sectors are free.

  * Managing files becomes tedious.

  * The filesystem maintains a table, that maps filenames to the
    sectors that contain the contents of the file.
//////

== Embedded Linux

=== Why Embedded Linux?

.Pros

  * No royalties or licensing fee.
  * Support is available from the community, as well from multiple
    vendors. This avoids vendor lock in.
  * Linux kernel supports a wide range of microprocessors and
    peripherals devices.
  * Re-use existing Linux application base.
  * Re-use existing Linux resource pool in embedded systems.

=== Why Embedded Linux Contd.

.Cons

  * Large memory foot print.

  * The stock kernel only offers soft real-time capabilities. Third
    party patches are available for latency reduction and adding hard
    real-time capabilities.

=== What is Embedded Linux

  * Customizing the Linux and its allies for a custom target board.
    - adding additional software for embedded interfaces
    - removing unnecessary components to reduce time and space 

=== Desktop Components
image::figures/desktop.png[width=600, align="center"]

[style="two-column"]
=== Target Hardware Components

[role="left"]
  * Processor
  * Flash
  * SDRAM
  * Serial Port
  * Ethernet

[role="right"]
image::figures/hardware.png[]

[role="two-column"]
=== Development Setup

[role="left"]
  * Host System - development env.

  * Target System - execution env.

  * The application running in the target system read input from the
    serial port, and send output to the serial port.

  * In other words, the standard input and standard output of the
    applications is attached to the serial port.


[role="right"]
image::figures/setup.png[]

=== Development Setup Contd.

  * Host system uses a serial terminal program like `minicom` and
    `putty` to communicate with the target system.

  * Kernel image and filesystem image download is done through
    Ethernet interface. Serial interface is not fast enough.

///////
[role="two-column"]
=== Linux Software Components

A bare minimal Linux system needs atleast below components.

[role="left"]
  * Boot Loader
  * Kernel
  * File System
    - C library
    - Shell & Utilities
    - Init & Boot Scripts

[role="right"]
image::figures/boot-timeline.png[width=588]

=== Boot Loader

  * Low-level hardware initialisation, memory controller
    initialisation, cache initialisation
 
  * Provide a mechanism to locate, load and execute kernel with
    necessary parameter.

  * Popular embedded boot loaders are
    - U-boot
    - Redboot, uses drivers from eCOS RTOS.

=== Kernel

  * Create higher level abstractions like files, processes, pipes,
       sockets, etc on top of the hardware.

  * Manage sharing of system resources - CPU, Memory, Devices.

== File System

=== File System Format

  * Specifies how files are laid out in a storage medium.

  * Various filesystem drivers are available like

    - *ext2/ext3/vfat* - filesystems commonly used in desktops

    - *jffs2* - filesystem tuned for Flash based memory devices

  * Pseudo filesystems are in-memory file systems which don't persist
    the data, rather provides realtime information.  
    - *proc:* process and kernel related information 
    - *sysfs:* kernel devices related information
    
=== Rootfs Contents

The rootfs has required files for system to function and user to
use. Bare minimal rootfs would have atleast

 * libraries required by applications

 * Shell

 * Initscripts to initialize the system
 
=== Storage for Embedded Systems

  * Hard disks are not suitable for embedded systems
    - Contain moving parts
    - Sensitive to physical shock
    - Requires multiple power supply voltages

  * Replaced by non-volatile memory devices - Flash

  * Embedded Linux systems require > 4MB of Flash memory.
///////

== ZKit-ARM-VF51

=== Base Board Details

* The board designed by Zilogic and named as ZKit-ARM-VF51

* This is the platform designed to explore and prototype Linux for
  various solutions.

* Designed to be low in power consumption, so that even with add-on
  boards, it can be powered from USB cable.

* It has 

  ** Vybrid VF5x 
     - ARM Cortex A5
     - 400 MHz
     - From NXP/Freescale

[role="two-column"]
=== Base Board Details Continued
[role="left"]
* 128 MB RAM

* 128 MB NAND

* MicroSD Slot

* Ethernet x 2

* USB host & device

* Raspberry Pi compatible connector for peripherals
[role="right"]
image::figures/zkit-arm-vf51.jpg[align="center"]

[role="two-column"]
=== Add-on Board Details
[role="left"]
* It is internally code named as `DietIO`

* Has peripherals devices 
  - LEDs
  - Keys
  - 4-Way Key
  - Monochrome Graphics LCD
  - POT
  - LDR
  - Accelerometer
[role="right"]
image::figures/dietio.jpg[]
//////
=== Add-on Board Design

* The board has an ARM Cortex-M3 micro-controller which acts as a
  co-processor performing an IO bridging.

* Perpiheral devices in diet-io board are relayed to host processor
  through this io-bridge.

* Certain devices are pass through where it is forwarded without any
  modification.

* Certain devices are exposed to Host CPU through different busses,
  for ex: 4-way keys are connected to GPIO of io-bridge, but exposed
  as I2C device to host processor.

* io-bridge software running in co-processor takes care of above
  pass-through and convertion.

=== Advantage of IO Bridge

* Host processor can have possibility of testing various devices
  through various busses.

* Complex devices can be presented with simple register sets.

* With help of IO Bridge a key can be presented to Host processor
  through GPIO interface or I2C interface.

* Testing host processor's interfaces becomes easy.
//////
=== Zkit + DietIO

image::figures/zkit-dietio.jpg[align="center"]

=== Complete Peripheral Details

image::figures/peripheral-blocks.png[align="center"]

=== Tryout

* Use Putty in Windows or Minicom to access debug console of board.

  - Check the `COM` number from `device manager` in Windows or
    `ttyUSBx` node from `dmesg` of Linux.
  - Use baudrate as `115200`, data config as `8N1` and flow control as
    `none`.

=== Tryout Contd.
 
  
  * Write a hello world python code in your laptop.
  
  * In target board, type 
 
----
 $ cat > hello.py

----

  - and copy paste the code to the target board's terminal.

  - The press `CTRL+D` to save the copied content to the file in
    the target board.

  - execute the `hello.py` in target board. 


