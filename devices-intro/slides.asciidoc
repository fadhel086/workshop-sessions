= Device Interfacing
Zilogic Systems
:data-uri:
:arm:

== Microprocessors

=== Model 1

image::figures/model.png[width="60%",align="center"]

=== Model 2

image::figures/model2.png[width="60%",align="center"]

=== Model 3

image::figures/model3.png[width="60%",align="center"]

=== RAM

image::figures/ram.png[width="25%",align="center"]

=== Instruction

image::figures/instruction.png[width="90%",align="center"]

== Memory Interfacing

=== Hypothetical 8-bit CPU

image::figures/8-bit-cpu.png[width="20%",align="center"]

=== RAM Interfacing

image::figures/single-ram.png[width="50%",align="center"]

=== Multiple RAM Chips

  * What if we wanted 32 bytes of RAM?
  * And we have only 16 byte RAM chips

=== Two RAM Chips

image::figures/two-ram-nodecode.png[width="40%",align="center"]

=== Chip Select

image::figures/chip-select.png[width="40%",align="center"]

=== With Decoding Logic

image::figures/two-ram.png[width="50%",align="center"]

=== System Bus

image::figures/system-bus.png[width="40%",align="center"]

== Device Interfacing

=== Seven Segment Display

image::figures/7-segment.png[width="70%",align="center"]

=== Seven Segment Display

image::figures/7-segment-data.png[width="70%",align="center"]

=== Replace RAM with Display

image::figures/ram-ram.png[width="70%",align="center"]

=== Memory Mapped IO

image::figures/ram-display.png[width="70%",align="center"]

=== Accessing Device from a C Program

[source,c]
------
unsigned char *p;

p = 0x10;   /* point it to device register */
*p = 5;   /* write to the device register */
------

=== Example: Display Controller

image::figures/display-controller.png[width="70%",align="center"]

Each pixel on the screen is controlled by 3 memory locations,
corresponding to R, G and B.

[role="two-column"]
=== Example: Serial Controller

[role="left"]
image::figures/serial-controller.png[align="center"]

[role="right"]
  * Data written to the TX register, is transmitted out

  * Data received, is available from the RX register

  * Data rate, and other comm. parameters can be specified through the
    CTL register

=== Memory Access Optmization

  * CPU is much faster than RAM

  * An operation like ADD, performed within the CPU takes about 0.5 ns

  * A memory access operation, takes about 100 ns

  * Optimization

    - Compiler Level
    - System Level
    - CPU Level

=== Compiler Level Optimization

  * Compiler level
+
------
int a;

a = 2;
...
a = 5;
------
+
  * Can be disastrous while accessing devices

  * Can be disabled using the `volatile` keyword

=== Interrupts

image::figures/interrupt.png[width="50%",align="center"]

  * Devices are slaves on the bus, cannot initiate a transaction
  
  * To notify the processor of data availability raises an 'interrupt'
    to the processor

  * The processor transfers control to the present location, executes
    the interrupt handler code and returns back

=== Interrupt Controller

image::figures/interrupt-controller.png[align="center",width="60%"]

  * Interrupt Controller has multiple interrupt request lines

  * Can be used to receive interrupts from multiple devices

  * Interrupt Controller provides registers to idenitfy which device
    raised the interrupt

[role="tip"]
=== //

But how does the USB mouse / keyboard talk to the CPU?

=== Controller Based IO

image::figures/io-controller.png[width="75%",align="center"]

=== Why?

  * I2C and SPI Bus
    - Reduces no. of pins on the chip
    - Saves board space, since only fewer lines are required

  * USB Bus
    - Serial interface reduces no. of wires
    - Decreases the thicknes of cable, improves flexibility
    - Simplified connector

ifdef::arm[]

== ARM Lab

[role="two-column"]
=== Target Board

[role="left"]
image::figures/connex-mmap.png[width="80%",align="center"]

[role="right"]
  * Qemu to emulate the target system

    - Gumstix Connex Board
    - Intel XScale PXA255 Processor
    - 64 MB RAM
    - 16 MB Flash

=== Toolchain

  * Pre-built GNU ARM Toolchain from Code Sourcery

  * Separate toolchain for bare metal programming

  * Cross tool chain prefix: `arm-none-eabi-`

    - `gcc`: `arm-none-eabi-gcc`
    - `ld`: `arm-none-eabi-ld`

=== Try Out

  * Create a 16MB file to represent the Flash
+
------
$ dd if=/dev/zero of=flash.bin bs=4096 count=4096
------
+
  * Download
    link:{include:u-boot.bin.datauri}["u-boot.bin",filename="u-boot.bin"]
    and store it in the top of the Flash
+
------
$ dd if=u-boot.bin of=flash.bin bs=4096 conv=notrunc
------

=== Try Out

  * Start Qemu with the Flash contents
+
------
$ qemu-system-arm -M connex -pflash flash.bin -nographic
------
+
  * When Qemu is started, the ARM processor starts executing code from
    the reset address

  * U-boot has been programmed at the address, U-boot starts executing

  * Serial port of the target is mapped to stdio of Qemu

endif::arm[]

ifdef::kernel-porting[]

== ARM Lab

=== Target Board

  * Qemu to emulate the target system

    - Gumstix Verdex Board
    - Intel XScale PXA27x Processor
    - 128 MB RAM
    - 32 MB Flash

=== Try Out

  * Run `kp-init` to setup the required files and folders
  
    - Creates TFTP dir, with image files
    - Creates Flash image file

  * Start Qemu with the Flash contents
+
------
run-qemu
------

endif::kernel-porting[]

[role="two-column"]
=== ARM SoC

[role="left"]
image::figures/arm-soc.png[align="center"]

[role="right"]
   * To access a device that is not memory mapped, the corresponding
     controller is required

   * System-on-Chips have many controllers on a single chip, to
     interface with various kinds of devices

=== RTC Registers

[options="header",width="75%",align="center"]
|======
| Address	| Name	| Description
| 0x40900000	| RCNR	| RTC Count Register
| 0x40900004	| RTAR	| RTC Alarm Register
| 0x40900008 	| RTSR	| RTC Status Register
| 0x4090000C	| RTTR	| RTC Trim Register
|======

=== Try Out

  * Viewing the RTC count register, from U-Boot prompt
+
------
GUM> md 0x40900000 1
------
+
  * Increments every 1 second

=== Conclusion

  * Served to refresh microprocessor and device interfacing
    fundamentals

  * Explored the lab setup

  * Re-inforced the idea of memory mapped IO with RTC example
