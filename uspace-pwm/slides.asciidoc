= Linux PWM
Zilogic Systems

== Introduction

=== GPIO Limitations

  * GPIO can be used turn an LED on or off

  * GPIO can be used turn a motor on or off

  * But what if we need to control the speed of the motor?

  * Or control the brightness of the LED?


=== Solution: Pulse Train

  * Instead of just turning the LED on or off

  * To control the brightness of a LED it needs to be switched on and
    off rapidly

  * Since the power is only applied to LED half the time, the LED will
    glow with half the brightness

image::figures/pwm-dutycycle-train.png[]

=== Solution: Pulse Train (Contd.)

  * Here we are generating a period wave form, where ON time is equal
    to OFF time

  * The brightness of the LED, can be further controlled by changing
    the ON time in the periodic waveform

image::figures/pwm-signal.png[width="50%",align="center"]

=== Pulsed GPIOs

* The GPIOs can be pulsed high and low by controlling the delay
  between them.

* Instead of doing this in software, it can be delegated to hardware
  controller

* PWM Controller: Hardware to generate periodic waveform, where the on
  time can be programmed

* The signal generated by PWM Controller is called PWM signal

== Pulse Width Modulation 

=== Overview

* Using PWM signal it is possible to generate analog variations with
  digital signals.

* The PWM signal can be used to control the power delivered to a load,
  by controlling the on-time of the PWM signal.

[role="two-column"]
=== PWM Signal Parameters

[role="left"]
* Period is the time taken by PWM signal to complete one cycle, which
  involves both on and off time.
+
------
PWM Period = ON Time + OFF Time
------
+
* The Duty Cycle is defined as the ratio of ON Time of the signal to
  the period of the signal.
+
----
Duty Cycle = (ON Time / Period) * 100
-----

[role="right"]
image::figures/pwm-params.png[]

=== PWM Applications

* PWM signals are used to dynamically control the power generated from
  a source.

* PWM signals are generally used for motor speed control, LED
  brightness control, power supplies and wave form generation.

[role="two-column"]
=== PWM Controller

[role="left"]
* The hardware which can be configured to generate PWM signals is
  called as `PWM controller`. 

* The width of the signal generated by controller can be configured
  through software by modifying PWM registers.

[role="right"]
image::figures/pwm-controller.png[]

[role="two-column"]
=== PWM Controller

[role="left"]
* PWM controller resides in the memory bus of the SOC.

[role="right"]
image::figures/pwm-arm.png[]

=== PWM Grouping

* Set of PWM signals are grouped into a single controller and as such
  there could be several PWM controler in a SOC.

* Each PWM signal in a PWM controller is called a `PWM channel`.
 
=== ZKit PWM Mappings

[options="header"]
|==================
| PWM Sequence of PWM3| Channel No in PWM3|Device   
| PWM16       | 0  |Backlight     
| PWM17       | 1  |DC Motor
| PWM18       | 2  |Buzzer 
|==================

=== PWM in Linux

* In Linux the PWM interfaces can be accessed from userspace
  application through sysfs.

* The access to sysfs goes to generic PWM driver, which inturn calls
  the processor specific PWM controller driver.

== Sysfs PWM

[role="two-column"]
=== Using PWMs with the sysfs interface

[role="left"]
* Inside `sysfs` in path `/sys/class/pwm` we have files which allows
  to control PWM channels.

* For each PWM controller a folder `sys/class/pwm/pwmchip<base>` is
  created

* Where `base` is the base channel number for that controller

[role="right"]
----

/sys/class/pwm/
| -- pwmchip<base>
     | -- pwm<no>
       	  | -- period
          | -- duty_cycle
          ` -- enable

----

[role="two-column"]
=== Using PWMs with the sysfs interface

[role="left"]
* For each channel in a PWM Chip we would find a directory
  `/sys/../pwmchip<base>/pwm<chno>`.

* Inside the channel directory we have files `period`, `duty_cycle` &
  `enable`.

[role="right"]
----

/sys/class/pwm/
| -- pwmchip<base>
     | -- pwm<no>
       	  | -- period
          | -- duty_cycle
          ` -- enable

----

== Peizo Buzzer

=== Buzzer Overview 

* It works on the inverse principle of peizo electric effect ie,
  `electrical energy` is converted into `mechanical energy`.

* When an oscillating digital signal is provided, the buzzer `stretch`
  or `compress`, producing sound.

* The `tone` of the sound can be modified by varying frequency of the
  signal.

* PWM can be interfaced to Buzzer to create varied tone.

[role="two-column"]
=== Buzzer Circuitry

image::figures/buzzer.png[width=400, align="center"]

[role="two-column"]
== PWM Access

=== PWM Channel Request

* The processor pins can be mapped for PWM channels through sysfs

----
$ echo 2 > /sys/class/pwm/pwmchip16/export
----

* You would find `/sys/class/pwm/pwmchip16/pwm2` available.

* PWM channel can be freed as shown below

----
$ echo 2 > /sys/class/pwm/pwmchip16/unexport
----

=== PWM Signal Control

* The period of the PWM can be controller as
----
$ echo 1000000 > /sys/class/pwm/pwmchip16/pwm2/period
----

* The duty cyle can be updated as 
----
$ echo 500000 > /sys/class/pwm/pwmchip16/pwm2/duty_cycle
----

* The PWM channel can be enabled / disabled as 
----
$ echo 1 > /sys/class/pwm/pwmchip16/pwm2/enable
----

=== Programming for Buzzer

Following code will control the tone of buzzer.

[source, python]
------
include::code/buzzer.py[]
------

=== PWM Class

[source, python]
------
include::code/pwm.py[]
------

=== Playing Tone

[source, python]
------
include::code/tone.py[]
------

== DC Motor

=== Overview

[role="left"] 

* The `speed` of the DC Motor is proportional to the `supply` voltage
  provided to it.

* Speed control can be acheived by `varying` the average voltage
  delivered to the motor.

* The motor is rapidly switched on and off, where by controlling the
  on-time it is possible to control the speed of the motor.

* To control the speed of the DC-motors the voltage to the DC-motor
  has to be modulated through PWM signals.

* DC motor's speed and direction of rotation can be controlled varying
  the voltage levels and polarity.

=== Voltage Variation

image::figures/avg-duty.png["Voltage variation with duty cycle",width="40%", align="center"]

=== Motor Control

  * Change the speed of the motor every 5 seconds

    - Low Speed: Set duty cycle to 30% for 5 seconds
    - Hight Speed: Set duty cycle to 100% for 5 seconds

  * Speed change can be observed
    - By feeling the change in vibration
    - By observing the wobling of the disk, at low speed

=== Motor Control Code

[source, python]
------
include::code/dcmotor.py[]
------

=== Try Out

  * Modify the DC motor code, to control instead the LCD backlight
    brightness instead

  * Modify the duty cycle steps, to 30%, 70% and 100%
