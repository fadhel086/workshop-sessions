= Linux Syscalls

== Role of Operating System

[role="two-column"]
=== No OS Model
[role="left"]

  * With bare metal programming without OS., application can access
    all the devices directly.

  * Don't have any restriction on accessing these resources.

  * Mostly single task applications.
   
[role="right"]
image::figures/no-os.png[width=300, align="center"]

=== GPOS Model

  * Kernel is a software which supports multi-tasking, 
    - creates and executes multiple processes simultaneously.

  * Kernel allows all other processses sharing resources like CPU,
    RAM, Harddisk etc.,

  * Kernel arbitrates the access to shared resources among multiple
    processes to avoid contention.

  * Processes are not allowed to access the shared resources directly.

=== GPOS Model
[role="right"]
image::figures/gpos-layers.png[width=400, align="center"]

=== Scope of a Process

The kernel to have better control over the tasks, it has to ensure
that

* Processess should have an isolated environment, where they have
  their own private memory, 
   - only they could access it 
   - and only that they could access.

* The Processes should request kernel for any other resource access,
  out of its isolation.

=== Scope of Kernel

Kernel has to ensure that

  * the processes can share the common resources

  * Process doesn't step over other process

  * Processes doesn't step over the kernel

  * Process can request kernel to proxy the access to the shared
    resources.

  * Process can request kernel to proxy the communication to other
    task.

[role="two-column"]  
=== Kernel and Syscalls
[role="left"]

  * Resource accesses are provided by OS through higher level
    abstractions like files, processes, sockets, etc.
 
  * The kernel provides these abstrations, to create and manipulate
    resources, as `system calls`.

[role="right"]
image::figures/gpos-stack.png[]

== Principle of Least Privilege

=== Address Space Isolation

  * For each process, separate address space

  * For kernel separate address space

  * Operating system achieves process isolation through `MMU`.

  * Address space denotes separate `page table entries` for kernel and
    each process, which would be mutually exclusive.

=== MMU for Page Access

image::figures/pagefault.png[align="center"]

=== Privilege Separation

  * Address space for kernel is called `kernel space`.

  * Address space for process is called `user space`.

  * Kernel space code can access user space memory, but not the
    reverse.

  * This privilege separation is achieved through processor's
    `privilege modes` feature.

=== MMU for User Space

image::figures/userpage.png[align="center"]

=== MMU for Kernel Space

image::figures/kernelpage.png[align="center"]

=== Privilege Escalation

  * The user space application, if they want to access kernel
    functions, they need to get to elevated to Kernel privilege.

  * The escalation from user privilege to kernel privilege is done by
    `software interrupts or traps`.

=== Trap Call
image::figures/trap.png[align="center"] 

== Address Space Isolation

[role="two-column"]  
=== Memory Sections
[role="left"]

  * Every process is associated with instructions to execute (code)
    and global data, stack and heap (data).

  * The kernel also has associated code and data.

[role="right"]
image::figures/sections.png[]

[role="two-column"]  
=== Address Space Co-existence 
[role="left"]

  * The process has to invoke the functions, inside the kernel to
    access shared resources.

  * One way to organize the memory map of the process is to map the
    user code, user data, kernel code and kernel data into the
    process's virtual address space.

[role="right"]
image::figures/process_mm.png[]

== Address Space Split

=== 3G / 1G Split  

  * The top `3GB` of virtual address space is used for the mapping the
    user code and data and the bottom `1GB` of virtual address space
    is used for mapping the kernel code and data.

  * When the scheduler switches between various processes the mapping
    for top 3GB of virtual address will keep switching to the
    corresponding process code and data. 

  * but the bottom 1GB will be always mapped to the same kernel code
    and data.

=== Advantage

  * This allows kernel to read and write data to the process's memory.

  * When the process wants to execute the system call, it can directly
    branch to the kernel function, if it knows the absolute address of
    them.

=== Process Switching

* On bootup kernel adds page table entries for it's own memory into
  MMU, so it can execute and access memory.

* And for each process there exists page table entries created by
  kernel allowing the process to access only it's own memory.

* When a process gets scheduled kernel loads the process's page table
  entries into MMU.

* When scheduled out, page table entries of process is unmappped from
  MMU.

===  Process 1
image::figures/context1.png[width=700,align="center"]

=== Proccess 2
image::figures/context2.png[width=700,align="center"]

=== Protecting the Kernel

  * But with this setup, the process can now modify the kernel code
    and data at will. This can result in jeopardizing the stability of
    the system.

== Privilege Separation

=== Privilege Separation

 * To ensure protection to kernel, there needs elevated privilege to
   the kernel.

 * The `kernel` needs to access everything, so its given `higher
   privilege` for unrestricted access.
 
 * `Process` meant to have restricted access, is given `lesser
   privilege`.

=== CPU Modes and Privilege Levels

 * CPUs have multilple modes that allows the software to run in
   different privilege levels.

 * Two level privileges in ARM 
   - `Supervisor` - high privilege
   - `User` - less privilege
 
 * Fource level privileges in x86  
   - Protection `Ring 0` - Supervisor
   - Protection `Ring 3` - User

=== CPU Privilege Modes and OS

  * In supervisor mode, the processor can execute any
    instruction, and can access any memory location.

  * In user mode, the processor cannot execute certain instructions,
    and cannot access certain memory locations.

  * For example the processor cannot execute instructions that modify
    the page tables, in user mode.

  * The kernel code executes in superuser mode, and user code executes
    in user mode.

=== Address Space Privileges

  * The page tables has a flag that indicate whether a page is a
    supervisor page.

  * supervisor pages can be accessed only when the processor is in
    supervisor mode.

  * User mode pages can be accessed when the processor is in either
    user or supervisor mode.

  * The pages corresponding to user code and data are indicated as
    user pages.

  * The pages corresponding to kernel code and data are indicated as
    supervisor pages.

== Privilege Escalation

=== Interrupts for Escalatation

  * The processor switches to supervisor mode under only one
    circumstance - when an interrupt occurs.

  * When an interrupt occurs the processor switches to supervisor and
    transfers control to the preset address.

  * The preset address generally contains kernel code that handles the
    interrupts.

=== Traps

  * Interrupts can occur due to hardware devices asserting the
    interrupt line - these are called hardware interrupts.

  * Interrupts can also be triggered using an instruction, these are
    called software interrupts or traps.

  * When a trap is executed, the processor switches to supervisor and
    transfers control to another preset address.

=== Trap Call
image::figures/trap.png[align="center"] 

== Internals of Syscalls

=== System Calls From Userspace

  * Each system call is given a unique no in the kernel.

  * When the user process wants to execute a system call, 

    - it stores the system call no. and its arguments in specific CPU
      registers
 
    - and triggers a software interrupt.

  * This implementation is available in libc

=== Syscalls in Kernel Space

  * The processor switches to supervisor, and starts executing the
    trap handler. The trap handler is part of the kernel code.

  * The trap handler uses the system call no. to index into system
    call table, and then branches to the specified system call.
 
  * returns through the same path.

=== Controlled Privilege Escalation

  * Userspace can run only kernel space functions, which are exposed
    as system calls.

  * Thus we are able to achieve controlled access to the system calls,
    through the privilege modes and the trap mechanism.

=== Syscall Sequence
image::figures/sc-sequence.png[align="center"]

== Debugging Syscalls

=== Strace

  * `strace` - traces system calls and signals of a process.

  * It intercepts and records the system calls which are called by a
    process and the signals which are received by a process.

  * `strace` provides information like the arguments to the system
    call, return values, errors if any, the time spent in a system
    call, whether signals occurred during the operation.

=== Strace for Parameters

  * Stracing a process can show the syscalls used, their arguments and
    the return value, as in below example

----
$ strace cat /dev/null
....
open("/dev/null", O_RDONLY|O_LARGEFILE) = 3
read(3, "", 4096)                       = 0
close(3)                                = 0
....
----

/////
=== Analogy to RPC

  * If we consider 
    - process as a client
    - kernel which acts as a server

  * requesting a special action through syscall, resembled a remote
    procedure call(RPC).

=== References 

* http://events.linuxfoundation.org/sites/events/files/slides/elc_2016_mem_0.pdf

* http://www.linux.it/~rubini/docs/ksys/

* https://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/

* http://www3.cs.stonybrook.edu/~porter/courses/cse506/f11/slides/interrupts.pdf

* http://davisdoesdownunder.blogspot.in/2011/02/linux-syscall-vsyscall-and-vdso-oh-my.html

* http://www.tldp.org/HOWTO/html_single/Module-HOWTO/

* https://www.ibm.com/developerworks/community/blogs/58e72888-6340-46ac-b488-d31aa4058e9c/entry/linux_system_calls20?lang=en

* http://faculty.salina.k-state.edu/tim/ossg/Introduction/sys_calls.html	

* https://syscalls.kernelgrok.com/
/////